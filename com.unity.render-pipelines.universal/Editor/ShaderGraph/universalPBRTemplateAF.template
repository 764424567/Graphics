Pass
{
    Name "$splice(PassName)"
    Tags { "LightMode" = "$splice(LightMode)" }
    //-------------------------------------------------------------------------------------
    // Render Modes (Blend, Cull, ZTest, Stencil, etc)
    //-------------------------------------------------------------------------------------
    $splice(Blending)
    $splice(Culling)
    $splice(ZTest)
    $splice(ZWrite)
    $splice(ColorMask)
    //-------------------------------------------------------------------------------------
    // End Render Modes
    //-------------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------------
    // Pre-defined Pragma definitions 
    //-------------------------------------------------------------------------------------
    HLSLPROGRAM
    // Required to compile gles 2.0 with standard srp library
    #pragma prefer_hlslcc gles
    #pragma exclude_renderers d3d11_9x
    #pragma target 2.0

    // -------------------------------------
    // Universal Pipeline keywords
    $features.lighting: #pragma multi_compile _ _MAIN_LIGHT_SHADOWS
    $features.lighting: #pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
    $features.lighting: #pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
    $features.lighting: #pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
    $features.lighting: #pragma multi_compile _ _SHADOWS_SOFT
    $features.lighting: #pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE
    $features.sprite: #pragma multi_compile _ ETC1_EXTERNAL_ALPHA

    $features.lighting: #ifdef LIGHTMAP_ON
    $features.lighting:     #define USE_LIGHTMAP
    $features.lighting: #else
    $features.lighting:     #define USE_SH
    $features.lighting: #endif

    // -------------------------------------
    // Unity defined keywords
    $features.3dRender: #pragma multi_compile _ DIRLIGHTMAP_COMBINED
    $features.3dRender: #pragma multi_compile _ LIGHTMAP_ON
    $features.3dRender: #pragma multi_compile_fog

    //--------------------------------------
    // GPU Instancing
    $features.instancing: #pragma multi_compile_instancing

    //-------------------------------------------------------------------------------------
    // End pre-defined Pragma Definitions
    //-------------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------------
    // Variant Definitions (active field translations to Universal defines)
    //-------------------------------------------------------------------------------------
    $SurfaceType.Transparent:            #define _SURFACE_TYPE_TRANSPARENT 1
    $AlphaClip:                          #define _AlphaClip 1
    $BlendMode.Add:                      #define _BLENDMODE_ADD 1
    $BlendMode.Premultiply:              #define _ALPHAPREMULTIPLY_ON 1

    //-------------------------------------------------------------------------------------
    // End Variant Definitions
    //-------------------------------------------------------------------------------------

    #pragma vertex vert
    #pragma fragment frag

    // Defines generated by graph
    $splice(Defines)

    // this translates the new dependency tracker into the preprocessor definitions for universal shader library
    $Attributes.normalOS:               #define ATTRIBUTES_NEED_NORMAL
    $Attributes.tangentOS:              #define ATTRIBUTES_NEED_TANGENT
    $Attributes.uv0:                    #define ATTRIBUTES_NEED_TEXCOORD0
    $Attributes.uv1:                    #define ATTRIBUTES_NEED_TEXCOORD1
    $Attributes.uv2:                    #define ATTRIBUTES_NEED_TEXCOORD2
    $Attributes.uv3:                    #define ATTRIBUTES_NEED_TEXCOORD3
    $Attributes.color:                  #define ATTRIBUTES_NEED_COLOR
    $Varyings.positionWS:               #define VARYINGS_NEED_POSITION_WS 
    $Varyings.normalWS:                 #define VARYINGS_NEED_NORMAL_WS
    $Varyings.tangentWS:                #define VARYINGS_NEED_TANGENT_WS
    $Varyings.texCoord0:                #define VARYINGS_NEED_TEXCOORD0
    $Varyings.texCoord1:                #define VARYINGS_NEED_TEXCOORD1
    $Varyings.texCoord2:                #define VARYINGS_NEED_TEXCOORD2
    $Varyings.texCoord3:                #define VARYINGS_NEED_TEXCOORD3
    $Varyings.color:                    #define VARYINGS_NEED_COLOR
    $Varyings.viewDirectionWS:          #define VARYINGS_NEED_VIEWDIRECTION_WS
    $Varyings.bitangentWS:              #define VARYINGS_NEED_BITANGENT_WS
    $Varyings.fogFactorAndVertexLight:  #define VARYINGS_NEED_FOG_AND_VERTEX_LIGHT
    $Varyings.cullFace:                 #define VARYINGS_NEED_CULLFACE
    $features.modifyMesh:               #define HAVE_MESH_MODIFICATION

    // Lighting include is always needed because of GI
    #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"    
    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
    #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
    #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"    
	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
    $features.lighting: #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Input.hlsl"


    //-------------------------------------------------------------------------------------
    // Interpolator Packing And Struct Declarations
    //-------------------------------------------------------------------------------------
    $buildType(Attributes)
    $buildType(Varyings)
    //-------------------------------------------------------------------------------------
    // End Interpolator Packing And Struct Declarations
    //-------------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------------
    // Graph generated code
    //-------------------------------------------------------------------------------------
    $splice(Graph)
    //-------------------------------------------------------------------------------------
    // End graph generated code
    //-------------------------------------------------------------------------------------

$features.modifyMesh: $include("VertexAnimation.template.hlsl")

$include("BuildSurfaceDescriptionInputs.template.hlsl")

$features.lighting: $include("BuildInputData.template.hlsl")
    
    //-------------------------------------------------------------------------------------
    // Pass Includes
    //-------------------------------------------------------------------------------------
$splice(Includes)
    //-------------------------------------------------------------------------------------
    // End Pass Includes
    //-------------------------------------------------------------------------------------

    ENDHLSL
}
